name: CI
on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

concurrency:
  group: ${{ github.repository }}-${{ github.head_ref || github.sha }}-${{ github.workflow }}
  cancel-in-progress: true

jobs:
  commitlint:
    if: ${{ github.event_name == 'pull_request' }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - uses: cachix/install-nix-action@v16
        with:
          nix_path: nixpkgs=channel:nixos-unstable-small

      - uses: cachix/cachix-action@v10
        with:
          name: protoletariat
          extraPullNames: nix-community,poetry2nix

      - name: commitlint
        run: nix shell -L -f '<nixpkgs>' commitlint -c commitlint --from=${{ github.event.pull_request.base.sha }} --to=${{ github.sha }} --verbose
  pre-commit:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - uses: cachix/install-nix-action@v16
        with:
          nix_path: nixpkgs=channel:nixos-unstable-small

      - uses: cachix/cachix-action@v10
        with:
          name: protoletariat
          authToken: ${{ secrets.CACHIX_AUTH_TOKEN }}
          extraPullNames: nix-community,poetry2nix

      - run: nix develop -c pre-commit run --all-files
  nix:
    strategy:
      fail-fast: false
      matrix:
        os:
          - ubuntu-latest
          - macos-10.15
          - macos-11
        python-version:
          - "37"
          - "38"
          - "39"
          - "310"
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v2

      - uses: cachix/install-nix-action@v16
        with:
          nix_path: nixpkgs=channel:nixos-unstable-small

      - uses: cachix/cachix-action@v10
        with:
          name: protoletariat
          authToken: ${{ secrets.CACHIX_AUTH_TOKEN }}
          extraPullNames: nix-community,poetry2nix

      - name: build package and run tests
        run: nix build --print-build-logs --keep-going '.#protoletariat${{ matrix.python-version }}' --no-link

      - name: show closure info
        run: nix path-info --closure-size --human-readable --recursive '.#protoletariat${{ matrix.python-version }}'
  docker-image:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - uses: cachix/install-nix-action@v16
        with:
          nix_path: nixpkgs=channel:nixos-unstable-small

      - uses: cachix/cachix-action@v10
        with:
          name: protoletariat
          authToken: ${{ secrets.CACHIX_AUTH_TOKEN }}
          extraPullNames: nix-community,poetry2nix

      - name: build docker image
        run: nix build --print-build-logs --keep-going '.#protoletariat-image' --no-link

      - name: load docker image
        run: |
          set -euo pipefail

          docker load -i "$(nix path-info --print-build-logs --keep-going '.#protoletariat-image')"

      - name: smoke test docker image
        run: |
          set -euo pipefail

          docker run --rm protoletariat:"$(nix eval --raw '.#protoletariat-image.imageTag')"
  conda:
    strategy:
      fail-fast: false
      matrix:
        os:
          - ubuntu-latest
          - macos-11
          - windows-latest
        python-version:
          - "3.7"
          - "3.8"
          - "3.9"
          - "3.10"
        buf:
          - buf
        click-version:
          - "click@<8"
          - "click"
        include:
          - os: ubuntu-latest
            python-version: "3.9"
            buf: no-buf
            click-version: "click"
          - os: macos-11
            python-version: "3.9"
            buf: no-buf
            click-version: "click"
          - os: windows-latest
            python-version: "3.9"
            buf: no-buf
            click-version: "click"
    runs-on: ${{ matrix.os }}
    defaults:
      run:
        shell: bash -l {0}
    steps:
      - uses: actions/checkout@v2

      - uses: bufbuild/buf-setup-action@v0.7.0
        if: ${{ matrix.buf == 'buf' }}
        with:
          github_token: ${{ github.token }}

      - uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}

      - run: pip3 install poetry2conda poetry
      - run: poetry add '${{ matrix.click-version }}'

      - name: Generate conda environment file
        run: |
          set -euo pipefail

          poetry2conda --dev pyproject.toml - | tee environment.yaml

      - uses: conda-incubator/setup-miniconda@v2
        with:
          mamba-version: "*"
          miniforge-variant: Mambaforge
          miniforge-version: latest
          channel-priority: strict
          activate-environment: protoletariat
          python-version: ${{ matrix.python-version }}
          environment-file: environment.yaml

      - run: mamba install grpc-cpp
      - run: poetry install
      - run: poetry run pytest -ra
  tensorflow:
    runs-on: ubuntu-latest
    env:
      PYTHON_OUT: /tmp/tensorflow-gen
      TENSORFLOW_HOME: ${{ github.workspace }}/tensorflow
    steps:
      - uses: actions/checkout@v2
        with:
          path: protoletariat

      - uses: cachix/install-nix-action@v16
        with:
          nix_path: nixpkgs=channel:nixos-unstable-small

      - uses: cachix/cachix-action@v10
        with:
          name: protoletariat
          authToken: ${{ secrets.CACHIX_AUTH_TOKEN }}
          extraPullNames: nix-community,poetry2nix

      - name: Clone Tensorflow
        uses: actions/checkout@v2
        with:
          repository: tensorflow/tensorflow
          path: tensorflow

      - run: mkdir -p "$PYTHON_OUT"

      - name: Generate tensorflow Python proto code
        working-directory: protoletariat
        run: |
          set -euo pipefail

          nix develop -c \
            protoc \
            --python_out "$PYTHON_OUT" \
            --proto_path "$TENSORFLOW_HOME" \
            $(find "$TENSORFLOW_HOME" -name '*.proto')

      - name: Test tensorflow rewriting
        working-directory: protoletariat
        run: |
          set -euo pipefail

          nix develop -c protol --in-place --create-package --python-out "$PYTHON_OUT" \
            protoc \
            --proto-path "$TENSORFLOW_HOME" \
            $(find "$TENSORFLOW_HOME" -name '*.proto')

      - name: Check for absolute imports
        run: grep -vq -R '^import tensorflow' "$PYTHON_OUT"
  release:
    runs-on: ubuntu-latest
    needs:
      - nix
      - conda
      - docker-image
      - pre-commit
      - tensorflow
    concurrency: release
    steps:
      - uses: tibdex/github-app-token@v1
        if: ${{ github.event_name != 'pull_request' }}
        id: generate_token
        with:
          app_id: ${{ secrets.APP_ID }}
          private_key: ${{ secrets.APP_PRIVATE_KEY }}

      - uses: actions/checkout@v2
        if: ${{ github.event_name != 'pull_request' }}
        with:
          fetch-depth: 0
          token: ${{ steps.generate_token.outputs.token }}

      - uses: actions/checkout@v2
        if: ${{ github.event_name == 'pull_request' }}
        with:
          fetch-depth: 0

      - run: git config --global user.name "github-actions"
      - run: git config --global user.email "github-actions@github.com"

      - uses: actions/setup-python@v2
        with:
          python-version: "3.x"

      - run: pip install poetry python-semantic-release

      - run: semantic-release publish --verbosity=DEBUG
        if: ${{ github.event_name != 'pull_request' }}
        env:
          GH_TOKEN: ${{ steps.generate_token.outputs.token }}
          PYPI_TOKEN: ${{ secrets.PYPI_TOKEN }}

      - run: semantic-release publish --noop --verbosity=DEBUG
        if: ${{ github.event_name == 'pull_request' }}
